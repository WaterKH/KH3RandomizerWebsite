@inject RandomizerService RandomizerService

<div class="simple-form change-option-modal">
    <div class="row" style="width: 95%;">
        <div class="col-md-4">
            <label for="original">Original: </label>
            <label id="original"><b>@this.Id.PartyIdToPartyName()</b></label>
        </div>
        <div class="col-md-4">
            <label for="randomized">Randomized: </label>
            <label id="randomized"><b>@this.Randomized.PartyIdToPartyName()</b></label>
        </div>
        <div class="col-md-4">
            <label for="id">Randomized Id: </label>
            <label id="id"><b>@this.Randomized.Replace("\u0000", "")</b></label>
        </div>
    </div>

    <hr />

    <div class="search-section">
        <div class="selected-checks">
            <div class="row" style="width: 100%; margin: 25px 0px;">
                <div class="col-md-1">
                    <label style="margin-top: 8px; font-size: larger; font-weight: 500;"><b>Search: </b></label>
                </div>

                <div class="col-md-8" style="align-self: center;">
                    <input value="@searchValue" id="partyMemberSearch" name="partyMemberSearch" class="kh-inputfield" @oninput="@((e) => this.SearchPartyMembers(e.Value.ToString()))" placeholder="Search for available values..." />
                </div>
            </div>
        </div>

        <div class="found-checks">
            @if (this.foundPartyMembers.Any())
            {
                @foreach (var partyMember in this.foundPartyMembers)
                {
                    <span class="selectable-item" @onclick="@(() => { this.Randomized = partyMember; })">@partyMember.PartyIdToPartyName()</span>
                }
            }
            else if (string.IsNullOrEmpty(this.searchValue))
            {
                <em>Search results will be displayed here if found.</em>
            }
            else
            {
                <em>No checks found for @this.searchValue</em>
            }
        </div>
    </div>

    <hr />

    <div class="row" style="width: 95%;">
        <div class="col-md-12">
            <div>
                <button @onclick="@Update" class="btn kh-button" style="margin-right: 5px;">Update Party Member</button>

                <button @onclick="ModalInstance.CancelAsync" class="btn kh-button-cancel" style="margin-left: 15px;">Cancel</button>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public Action<string, string> UpdatePartyMember { get; set; }

    [Parameter] public string Id { get; set; }
    [Parameter] public string Randomized { get; set; }

    private string searchValue = "";
    private Dictionary<string, string> allPartyMembers = new Dictionary<string, string>();
    private List<string> foundPartyMembers = new List<string>();

    protected override void OnInitialized()
    {
        this.allPartyMembers = this.RandomizerService.GetDefaultPartyMembers();
    }

    public async void Update()
    {
        UpdatePartyMember.Invoke(this.Id, this.Randomized);

        await ModalInstance.CloseAsync();

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void SearchPartyMembers(string search)
    {
        this.searchValue = search;

        this.foundPartyMembers = new List<string>();

        if (string.IsNullOrEmpty(this.searchValue))
            return;

        foreach (var party in this.allPartyMembers)
        {
            if (party.Value.PartyIdToPartyName().ToLower().Contains(searchValue.ToLower()))
                this.foundPartyMembers.Add(party.Key);
        }

        this.foundPartyMembers.Sort();

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }
}