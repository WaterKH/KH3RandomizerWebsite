@using UE4DataTableInterpreter.Enums

@inject RandomizerService RandomizerService

<div class="search-section">
    <div class="selected-checks">
        <div class="row" style="width: 100%; margin: 25px 0px;">
            <div class="col-md-1">
                <label style="margin-top: 8px; font-size: larger; font-weight: 500;"><b>Search: </b></label>
            </div>

            <div class="col-md-8" style="align-self: center;">
                @if (this.ListLimit > 0)
                {
                    <span class="limit">@(this.SelectedChecks.Count + "/" + this.ListLimit)</span>
                }

                <input value="@searchValue" id="randomizer_search" name="randomizer_search" class="kh-inputfield" @oninput="@((e) => this.SearchChecks(e.Value.ToString()))" placeholder="Search for available values..." />
            </div>
        </div>
    </div>

    <div class="found-checks">
        @if (this.foundChecks.Count > 0)
        {
            @foreach (var check in this.foundChecks)
            {
                <span class=@(ActionType.Equals("Options") ? "check options-check" : ActionType.Equals("Modal") ? "check modal-check" : "check") @onclick="@(() => this.AddCheck(check))">@this.DisplayCheck(check) <i class="bi bi-plus-lg check-icon"></i></span>
            }
        }
        else if (string.IsNullOrEmpty(this.searchValue))
        {
            <em>Search results will be displayed here if found.</em>
        }
        else
        {
            <em>No checks found for @this.searchValue</em>
        }
    </div>
</div>

@code {
    [Parameter] public List<string> SelectedChecks { get; set; }
    [Parameter] public int SearchLimit { get; set; }
    [Parameter] public int ListLimit { get; set; }
    [Parameter] public string Filter { get; set; }
    [Parameter] public string ActionType { get; set; } = "Options";
    [Parameter] public bool Duplicates { get; set; }
    [Parameter] public EventCallback<string> AddSelected { get; set; }

    private string searchValue = "";
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> allChecks;
    private List<string> foundChecks = new List<string>();

    protected override void OnInitialized()
    {
        this.allChecks = this.RandomizerService.GetDefaultOptions();

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        this.SearchChecks(this.searchValue);
    }

    private void SearchChecks(string search)
    {
        this.searchValue = search;

        this.foundChecks = new List<string>();

        if (string.IsNullOrEmpty(this.searchValue))
            return;

        // TODO Need to refactor this to make it more readable/ maintainable
        foreach (var category in this.allChecks)
        {
            var categoryConverted = category.Key.DataTableEnumToKey();
            foreach (var subCategory in category.Value)
            {
                var subCategoryConverted = subCategory.Key.CategoryToKey(category.Key);

                foreach (var option in subCategory.Value)
                {
                    if (this.foundChecks.Count < this.SearchLimit && option.Value.ValueIdToDisplay().ToLower().Contains(this.searchValue.ToLower()) && !option.Value.ValueIdToDisplay().Contains("ETres"))
                    {
                        string checkToAdd = option.Value;
                        if (!string.IsNullOrEmpty(this.Filter))
                        {
                            var filteredOption = option.Value.ValueIdToDisplay().Split(this.Filter);
                            if (filteredOption.Count() <= 1)
                                continue;
                        }

                        if (!this.foundChecks.Contains(checkToAdd) && (this.Duplicates || !this.SelectedChecks.Contains(checkToAdd)))
                            this.foundChecks.Add(checkToAdd);

                        if (this.foundChecks.Count == this.SearchLimit)
                            break;
                    }
                }
            }
        }

        this.foundChecks.Sort();

        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void AddCheck(string check)
    {
        if (this.Duplicates || !this.SelectedChecks.Contains(check))
        {
            if (this.ListLimit == 0 || this.SelectedChecks.Count < this.ListLimit)
            {
                this.AddSelected.InvokeAsync(check);

                this.SearchChecks(this.searchValue);
            }
        }
    }

    private string DisplayCheck(string check)
    {
        string checkValue = check.ValueIdToDisplay();

        if (string.IsNullOrEmpty(this.Filter))
            return checkValue;

        var filteredOption = checkValue.Split(this.Filter);

        if (filteredOption.Count() <= 1)
            return checkValue;

        return filteredOption[1];
    }
}
