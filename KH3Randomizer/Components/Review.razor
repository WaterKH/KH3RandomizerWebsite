@using Enums;
@using Models.Configuration;
@using UE4DataTableInterpreter.Enums;
@using UE4DataTableInterpreter.Models;

@inject RandomizerService RandomizerService
@inject IJSRuntime js

<div class="review-section">
    <div class="review-subsection">
        <div class="review-sub-subsection">
            <div class="review-header" style="display: unset;">
                <div class="row">
                    <div class="col-md-7" style="display: flex;">
                        <h3 for="seed" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #aeecff;"></span><b>Seed Name: </b></h3>
                        <label id="seed" name="seed" style="margin-left: 50px; margin-top: 2px; font-weight: 600;">@(string.IsNullOrEmpty(this.CurrentSeed) ? "The Seed Name is blank." : this.CurrentSeed)</label>
                    </div>

                    <div class="col-md-5" style="display: flex;">
                        <h3 for="exp" style="font-size: 1.3rem;"><b>EXP Multiplier: </b></h3>
                        <label id="exp" name="exp" style="margin-left: 50px; margin-top: 2px; font-weight: 600;">@(this.EXPMultiplier)x</label>
                    </div>
                </div>
            </div>

            <div class="review-content">
            </div>
        </div>

        <div class="review-sub-subsection">
            <div class="review-header">
                <h3 for="pools" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #c9aeff;"></span><b>Pools: </b></h3>
            </div>
            <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                @if (this.AvailablePools.Any(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Randomize))
                {
                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Randomized: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Randomize))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Randomize"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                @if (this.AvailablePools.Any(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Replace))
                {
                    <br />
                    <br />

                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Replace: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Replace))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Replace"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                @if (this.AvailablePools.Any(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Vanilla))
                {
                    <br />
                    <br />

                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Vanilla: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Vanilla))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Vanilla"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                @if (this.AvailablePools.Any(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Balanced))
                {
                    <br />
                    <br />

                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Balanced: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Balanced))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Randomize"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }

                @if (this.AvailablePools.Any(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Boosted))
                {
                    <br />
                    <br />

                    <h4 for="pools" style="font-size: 1.0rem; margin-left: 10px;"><u><b>Boosted: </b></u></h4>
                    @foreach (var pool in this.AvailablePools.Where(x => x.Key != "Always On" && x.Value == RandomizeOptionEnum.Boosted))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(pool.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="@poolColors["Replace"]">@pool.Key</span>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        @if (this.Exceptions.Where(x => x.Value).Count() > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="exceptions" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #f37d9d;"></span><b>Exceptions: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var exception in this.Exceptions.Where(x => x.Value))
                    {
                        <div style="display: inline-flex;">
                            <div id="@(exception.Key)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="background: #f95968;">@exception.Key</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (this.Modifications.Count > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="modifications" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #76d3ff;"></span><b>Modifications: </b></h3>
                </div>
                <div class="review-content" style="max-height: 500px; overflow-y: auto;">
                    @foreach (var modification in this.Modifications)
                    {
                        <div style="display: inline-flex; width: 100%">
                            <label id="@modification.Item1.Category" name="@modification.Item1.Category" style="min-width: fit-content; max-width: fit-content; margin-top: 10px;">
                                <span class="pools-options-color" style="background: #76d3ff;"></span><b>@(@modification.Item1.Category.DataTableEnumToKey()):</b>
                            </label>

                            <div id="@(modification.Item1.Category)_subOptions" style="display: inline;">
                                <span style="margin-left: 25px;"><b>@modification.Item1.SubCategory.KeyIdToDisplay() - </b></span>

                                <span class="sub-option-bubble" style="background: #56adff;">@modification.Item1.Value.ValueIdToDisplay()</span>
                                <span style="margin-left: 5px;"><b> Swapped with:</b></span>
                            </div>
                        </div>

                        <div style="display: inline-flex; width: 90%; margin-left: 50px;">
                            <label id="@modification.Item2.Category" name="@modification.Item2.Category" style="min-width: fit-content; max-width: fit-content; margin-top: 10px;">
                                <span class="pools-options-color" style="background: #76d3ff;"></span><b>@(@modification.Item2.Category.DataTableEnumToKey()):</b>
                            </label>

                            <div id="@(modification.Item2.Category)_subOptions" style="display: inline;">
                                <span style="margin-left: 25px;"><b>@modification.Item2.SubCategory.KeyIdToDisplay() - </b></span>

                                <span class="sub-option-bubble" style="background: #2f9aff;">@modification.Item2.Value.ValueIdToDisplay()</span>
                            </div>
                        </div>

                        <br />
                    }
                </div>
            </div>
        }

        @if (this.AvailableQualityOfLifeSettings.Count > 0)
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="hints" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #92ff9b;"></span><b>Quality of Life: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    @foreach (var qol in this.AvailableQualityOfLifeSettings)
                    {
                        @if (qol.Value.Where(x => x.Value).Count() > 0)
                        {
                            <h4 style="font-size: 1.0rem; margin-left: 10px;"><u><b>@qol.Key: </b></u></h4>

                            @foreach (var qolValue in qol.Value.Where(x => x.Value))
                            {
                                <div style="display: inline-flex;">
                                    <div id="@(qolValue.Key)_value" style="display: inline;">
                                        <span class="sub-option-bubble" style="@qolColors[qol.Key]">@qolValue.Key</span>
                                    </div>
                                </div>
                            }

                            <br />
                            <br />
                        }
                    }
                </div>
            </div>
        }

        @if (this.ImportantChecks.Count > 0 && !this.HintSelectionType.Equals("None"))
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="hints" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #ffac2f;"></span><b>Hints: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    <h4 style="font-size: 1.0rem; margin-left: 10px;"><u><b>Hint Selection Type: @this.HintSelectionType</b></u></h4>

                    @foreach (var importantCheck in this.ImportantChecks)
                    {
                        <div style="display: inline-flex;">
                            <div id="@(importantCheck)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="background: #ffac2f;">@importantCheck</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }

        @if (this.ClearConditions.Count > 0 && !this.ClearConditionSelectionType.Equals("None"))
        {
            <div class="review-sub-subsection">
                <div class="review-header">
                    <h3 for="clear_conditions" style="font-size: 1.3rem;"><span class="header-color" style="background-color: #00c0fa;"></span><b>Clear Conditions: </b></h3>
                </div>
                <div class="review-content" style="max-height: 600px; overflow-y: auto;">
                    <h4 style="font-size: 1.0rem; margin-left: 10px;"><u><b>Clear Condition Selection Type: @this.ClearConditionSelectionType</b></u></h4>

                    @foreach (var condition in this.ClearConditions)
                    {
                        <div style="display: inline-flex;">
                            <div id="@(condition)_value" style="display: inline;">
                                <span class="sub-option-bubble" style="background: #00c0fa;">@condition.Key.ValueIdToDisplay()</span>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <button class="btn kh-button" onclick="@BackTo" style="float: left;">Back to @(this.IsPlando ? "Options" : "Clear Conditions")...</button>
    <button class="btn @(this.isGeneratingSeed ? "kh-button-disabled" : "kh-button")" @onclick="() => this.ClickGenerateSeed()" style="float: right;" disabled="@this.isGeneratingSeed">@(!this.isGeneratingSeed ? "Generate Seed" : "Generating Seed...")</button>
</div>
@code {
    [Inject] IBlazorDownloadFileService BlazorDownloadFileService { get; set; }

    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public Action BackTo { get; set; }
    [Parameter] public string CurrentSeed { get; set; }

    [Parameter] public Dictionary<string, RandomizeOptionEnum> AvailablePools { get; set; }
    [Parameter] public float EXPMultiplier { get; set; }
    [Parameter] public Dictionary<string, bool> Exceptions { get; set; }
    [Parameter] public Dictionary<string, int> Limiters { get; set; }
    [Parameter] public List<Tuple<Option, Option>> Modifications { get; set; }

    [Parameter] public string HintSelectionType { get; set; }
    [Parameter] public List<string> ImportantChecks { get; set; }

    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableQualityOfLifeSettings { get; set; }

    [Parameter] public string ClearConditionSelectionType { get; set; }
    [Parameter] public Dictionary<string, int> ClearConditions { get; set; }

    [Parameter] public bool IsPlando { get; set; }


    private Dictionary<string, string> poolColors = new Dictionary<string, string>
{
        { "Randomize", "background: #a076f5;" },
        { "Replace", "background: #b189ff;" },
        { "Vanilla", "background: #c9aeff;" },
    };

    private Dictionary<string, string> exceptionColors = new Dictionary<string, string>
{
        { "Can Be None", "background: #56adff;" },
        { "Default Abilities", "background: #56adff;" },
    };

    private Dictionary<string, string> hintColors = new Dictionary<string, string>
{
        { "Proofs", "background: #56adff;" },
        { "Abilities", "background: #56adff;" },
        { "Heartbinders", "background: #56adff;" },
        { "Magic", "background: #56adff;" },
        { "Formchanges", "background: #56adff;" },
        { "Secret Reports", "background: #56adff;" }
    };

    private Dictionary<string, string> qolColors = new Dictionary<string, string>
{
        { "Bosses", "background: #54ed61;" },
        { "Events", "background: #66ff73;" },
        { "Items", "background: #92ff9b;" },
    };

    bool isGeneratingSeed { get; set; }


    public void ClickGenerateSeed()
    {
        this.isGeneratingSeed = true;

        InvokeAsync(() =>
        {
            StateHasChanged();
        });

        Task.Run(async () => { await this.GenerateSeed(); });
    }

    public async Task GenerateSeed()
    {
        var poolConfiguration = new Pool
        {
            Selections = this.AvailablePools,
            Exceptions = this.Exceptions,
            Limiters = this.Limiters,
            EXPMultiplier = this.EXPMultiplier
        };

        var qolConfiguration = new QoL
        {
            Selections = this.AvailableQualityOfLifeSettings
        };

        var hintConfiguration = new Hint
        {
            Type = this.HintSelectionType,
            Checks = this.ImportantChecks
        };

        var clearConditionConfiguration = new ClearCondition
        {
            Type = this.ClearConditionSelectionType,
            Conditions = this.ClearConditions
        };

        // Generate Randomized Seed
        var file = await this.RandomizerService.GenerateRandomizerSeed(this.CurrentSeed, poolConfiguration, qolConfiguration, hintConfiguration, clearConditionConfiguration, this.Modifications);

        await js.InvokeAsync<object>("saveAsFile", "pakchunk99-randomizer-" + this.CurrentSeed + ".zip", Convert.ToBase64String(file));
        //await js.InvokeAsync<object>("saveAsFile", "pakchunk99-randomizer-" + this.CurrentSeed + ".pak", Convert.ToBase64String(files[0]));
        //await js.InvokeAsync<object>("saveAsFile", "SpoilerLog-" + this.CurrentSeed + ".json", Convert.ToBase64String(files[1]));

        this.RandomizerService.DeleteRandomizerSeed(this.CurrentSeed);

        this.isGeneratingSeed = false;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });

        var parameters = new ModalParameters();
        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<RedirectToGuideModal>("Redirect To Guides", parameters, options);
    }
}