@inject RandomizerService RandomizerService

<Table Items="this.PartyMembers" Context="PartyMember" CurrentPage="1">
    <TableHeader>
        <th>Original</th>
        <th>Randomized</th>
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>@PartyMember.Id.PartyIdToPartyName()</td>
        <td>@PartyMember.Randomized.PartyIdToPartyName()</td>
        <td><a href="#" @onclick="() => OpenModal(PartyMember)" @onclick:preventDefault>Change</a></td>
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string PartyMemberName { get; set; }

    [Parameter] public Action<string, string> UpdatePartyMember { get; set; }
    [Parameter] public Dictionary<string, string> RandomizedPartyMembers { get; set; }

    private List<PartyMember> PartyMembers { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<Dictionary<string, string>>(nameof(RandomizedPartyMembers), out var partyMembers))
        {
            this.PartyMembers = partyMembers.Select(x => new PartyMember { Id = x.Key, Randomized = x.Value }).ToList();
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(PartyMember partyMember)
    {
        var parameters = new ModalParameters();

        parameters.Add("Id", partyMember.Id);
        parameters.Add("Randomized", partyMember.Randomized);

        parameters.Add("UpdatePartyMember", UpdatePartyMember);

        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<ChangePartyMember>($"Change {PartyMemberName}", parameters, options);
    }
}