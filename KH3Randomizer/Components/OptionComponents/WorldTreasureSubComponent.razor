@using UE4DataTableInterpreter.Enums 

@inject RandomizerService RandomizerService

<Table Items="this.Treasures" Context="Treasure" CurrentPage="1">
    <TableHeader>
        <th>Chest</th>
        <th>Reward</th>
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>
            @(this.GetGummiphoneTreasure(Treasure.Id.KeyIdToDisplay()))
            <Tooltip Text="@Treasure.Id.KeyIdToDisplay().GetChestLocation(GetDataTableEnumFromSelection(this.WorldName))">
                <i class="bi bi-question-circle" style="font-size: 1rem; color: #0366de;"></i>
            </Tooltip>
        </td>

        <td>@Treasure.Reward.ValueIdToDisplay()</td>
        @if (this.actionType == "Options")
        {
            <td><a href="#" @onclick="() => OpenModal(Treasure.Id, Treasure.Reward)" @onclick:preventDefault>Change</a></td>
        }
        else if (this.actionType == "Modal")
        {
            <td><a href="#" @onclick="@(() => SwapOptions.Invoke(GetDataTableEnumFromSelection(this.WorldName), Treasure.Id, "Treasure", Treasure.Reward))" @onclick:preventDefault>Swap</a></td>
        }
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string WorldName { get; set; }

    [Parameter] public EventCallback<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>> UpdateRandomizedOptions { get; set; }
    [Parameter] public Action<Option, Option> UpdateModifications { get; set; }

    [Parameter] public Dictionary<string, Dictionary<string, bool>> AvailableOptions { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }

    [Parameter] public string ActionType { get; set; } = "Options"; // Options, Modal, Spoiler
    [Parameter] public string CurrentSeed { get; set; }


    [Parameter] public Action<DataTableEnum, string, string, string> SwapOptions { get; set; }

    private List<Treasure> Treasures { get; set; }
    private Dictionary<string, Dictionary<string, bool>> availableOptions = new();
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();
    private string actionType;
    private string currentSeed;

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(WorldName), out var value) && parameters.TryGetValue<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>>(nameof(RandomizedOptions), out var options))
        {
            this.randomizedOptions = options;
            this.Treasures = this.RandomizerService.GetAvailableTreasuresForWorld(value, ref this.randomizedOptions);
        }

        if (parameters.TryGetValue<Dictionary<string, Dictionary<string, bool>>>(nameof(AvailableOptions), out var availableOptions))
        {
            this.availableOptions = availableOptions;
        }

        if (parameters.TryGetValue<string>(nameof(ActionType), out var actionType))
        {
            this.actionType = actionType;
        }

        if (parameters.TryGetValue<string>(nameof(CurrentSeed), out var currentSeed))
        {
            this.currentSeed = currentSeed;
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(string category, string item)
    {
        var dataTableEnum = this.GetDataTableEnumFromSelection(this.WorldName);

        var parameters = new ModalParameters();

        parameters.Add("Category", dataTableEnum);
        parameters.Add("SubCategory", category);
        parameters.Add("Name", "Treasure");
        parameters.Add("Value", item);
        parameters.Add("CurrentSeed", this.currentSeed);
        parameters.Add("ActionType", "Modal");

        parameters.Add("UpdateRandomizedOptions", this.UpdateRandomizedOptions);
        parameters.Add("UpdateModifications", this.UpdateModifications);

        parameters.Add("AvailableOptions", this.availableOptions);
        parameters.Add("RandomizedOptions", this.randomizedOptions);

        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<ChangeOption>($"Change {this.WorldName} - {category.KeyIdToDisplay()} - {item.ValueIdToDisplay()}", parameters, options);
    }

    private DataTableEnum GetDataTableEnumFromSelection(string selection)
    {
        switch (selection)
        {
            case "Olympus":
                return DataTableEnum.TreasureHE;
            case "Twilight Town":
                return DataTableEnum.TreasureTT;
            case "Kingdom of Corona":
                return DataTableEnum.TreasureRA;
            case "Toy Box":
                return DataTableEnum.TreasureTS;
            case "Arendelle":
                return DataTableEnum.TreasureFZ;
            case "Monstropolis":
                return DataTableEnum.TreasureMI;
            case "The Caribbean":
                return DataTableEnum.TreasureCA;
            case "San Fransokyo":
                return DataTableEnum.TreasureBX;
            case "Keyblade Graveyard":
                return DataTableEnum.TreasureKG;
            case "The Final World":
                return DataTableEnum.TreasureEW;
            case "Re+Mind":
                return DataTableEnum.TreasureBT;
            default:
                return DataTableEnum.None;
        }
    }

    private string GetGummiphoneTreasure(string display)
    {
        var temp = display.GetChestLocation(GetDataTableEnumFromSelection(this.WorldName));

        return temp.Split(" (")[0];
    }
}