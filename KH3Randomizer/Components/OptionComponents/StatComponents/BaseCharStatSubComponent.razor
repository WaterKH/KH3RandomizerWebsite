@using UE4DataTableInterpreter.Enums
@using KH3Randomizer.Models.Stats

@inject RandomizerService RandomizerService

<Table Items="this.BaseCharStats" Context="BaseCharStat" CurrentPage="1">
    <TableHeader>
        <th>Player</th>
        <th>HP</th>
        <th>MP</th>
        <th>FP</th>
        @*<th>AP</th>
        <th>Attack</th>
        <th>Magic</th>
        <th>Defense</th>*@
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>@BaseCharStat.Player</td>
        <td>@BaseCharStat.HP</td>
        <td>@BaseCharStat.MP</td>
        <td>@BaseCharStat.FP</td>
        @*<td>@BaseCharStat.AP</td>
        <td>@BaseCharStat.Attack</td>
        <td>@BaseCharStat.Magic</td>
        <td>@BaseCharStat.Defense</td>*@
        <td><a href="#" @onclick="() => OpenModal(BaseCharStat)" @onclick:preventDefault>Change</a></td>
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string BaseCharStatName { get; set; }

    [Parameter] public Action<DataTableEnum, string, Dictionary<string, string>, Dictionary<string, string>> UpdateStat { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }

    private List<BaseCharStat> BaseCharStats { get; set; }
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(this.BaseCharStatName), out var value) && parameters.TryGetValue<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>>(nameof(RandomizedOptions), out var options))
        {
            this.randomizedOptions = options;
            this.BaseCharStats = this.RandomizerService.GetAvailableBaseCharStats(value, ref this.randomizedOptions);
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(BaseCharStat baseCharStat)
    {
        var parameters = new ModalParameters();

        var baseCharStats = new Dictionary<string, string> {
            { "MaxHitPoint", baseCharStat.HP }, { "MaxMagicPoint", baseCharStat.MP }, { "MaxFocusPoint", baseCharStat.FP }, { "AbilityPoint", baseCharStat.AP },
            { "AttackPower", baseCharStat.Attack }, { "MagicPower", baseCharStat.Magic }, { "DefensePower", baseCharStat.Defense }
        };

        parameters.Add("Category", DataTableEnum.BaseCharStat);
        parameters.Add("SubCategory", baseCharStat.Player);
        parameters.Add("OriginalStats", baseCharStats); 
        parameters.Add("UpdatedStats", baseCharStats.ToDictionary(x => x.Key, y => y.Value));

        parameters.Add("UpdateStat", UpdateStat);

        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<ChangeStat>($"Change {baseCharStat.Player} Stats", parameters, options);
    }
}