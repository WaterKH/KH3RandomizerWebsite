@using UE4DataTableInterpreter.Enums
@using KH3Randomizer.Models.Stats

@inject RandomizerService RandomizerService

<h2><span class="selector" style="background-color: #df10fd;"></span>@this.EquipmentStatName</h2>

<Table Items="this.EquipmentStats" Context="EquipmentStat" CurrentPage="1">
    <TableHeader>
        <th>Item</th>
        <th>AP</th>
        <th>Atk+</th>
        <th>Mag+</th>
        <th>Def+</th>
        <th title="Physical Resistance">P. &#8486;</th>
        <th title="Fire Resistance">F. &#8486;</th>
        <th title="Blizzard Resistance">B. &#8486;</th>
        <th title="Thunder Resistance">T. &#8486;</th>
        <th title="Water Resistance">W. &#8486;</th>
        <th title="Aero Resistance">A. &#8486;</th>
        <th title="Dark Resistance">D. &#8486;</th>
        <th title="No Type Resistance">N. &#8486;</th>
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>@EquipmentStat.EquipItem.KeyIdToDisplay()</td>
        <td>@EquipmentStat.AP</td>
        <td>@EquipmentStat.AttackPlus</td>
        <td>@EquipmentStat.MagicPlus</td>
        <td>@EquipmentStat.DefensePlus</td>
        <td>@EquipmentStat.PhysicalResistance</td>
        <td>@EquipmentStat.FireResistance</td>
        <td>@EquipmentStat.BlizzardResistance</td>
        <td>@EquipmentStat.ThunderResistance</td>
        <td>@EquipmentStat.WaterResistance</td>
        <td>@EquipmentStat.AeroResistance</td>
        <td>@EquipmentStat.DarkResistance</td>
        <td>@EquipmentStat.NullResistance</td>
        <td><a href="#" @onclick="() => OpenModal(EquipmentStat)" @onclick:preventDefault>Change</a></td>
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public string EquipmentStatName { get; set; }

    [Parameter] public Action<DataTableEnum, string, Dictionary<string, string>, Dictionary<string, string>> UpdateStat { get; set; }
    [Parameter] public Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> RandomizedOptions { get; set; }

    private List<EquipmentStat> EquipmentStats { get; set; }
    private Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>> randomizedOptions = new();

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<string>(nameof(this.EquipmentStatName), out var value) && parameters.TryGetValue<Dictionary<DataTableEnum, Dictionary<string, Dictionary<string, string>>>>(nameof(RandomizedOptions), out var options))
        {
            this.randomizedOptions = options;
            this.EquipmentStats = this.RandomizerService.GetAvailableEquipmentStats(value, ref this.randomizedOptions);
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(EquipmentStat equipmentStat)
    {
        var parameters = new ModalParameters();

        var equipmentStats = new Dictionary<string, string> {
            { "AP", equipmentStat.AP }, { "AttackPlus", equipmentStat.AttackPlus }, { "MagicPlus", equipmentStat.MagicPlus }, { "DefensePlus", equipmentStat.DefensePlus },
            { "AttrResistPhysical", equipmentStat.PhysicalResistance }, { "AttrResistFire", equipmentStat.FireResistance }, { "AttrResistBlizzard", equipmentStat.BlizzardResistance },
            { "AttrResistThunder", equipmentStat.ThunderResistance }, { "AttrResistWater", equipmentStat.WaterResistance }, { "AttrResistAero", equipmentStat.AeroResistance },
            { "AttrResistDark", equipmentStat.DarkResistance }, { "AttrResistNoType", equipmentStat.NullResistance },
        };

        parameters.Add("Category", DataTableEnum.EquipItemStat);
        parameters.Add("SubCategory", equipmentStat.EquipItem);
        parameters.Add("OriginalStats", equipmentStats);
        parameters.Add("UpdatedStats", equipmentStats.ToDictionary(x => x.Key, y => y.Value));

        parameters.Add("UpdateStat", UpdateStat);

        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<ChangeStat>($"Change {this.EquipmentStatName} {equipmentStat.EquipItem.KeyIdToDisplay()} Stats", parameters, options);
    }
}