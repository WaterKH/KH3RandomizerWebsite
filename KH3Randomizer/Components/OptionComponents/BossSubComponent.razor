@inject RandomizerService RandomizerService

<Table Items="this.Bosses" Context="Boss" CurrentPage="1">
    <TableHeader>
        <th>Original</th>
        <th>Randomized</th>
        <th>Action</th>
    </TableHeader>
    <RowTemplate>
        <td>@Boss.Id.BossIdToBossName()</td>
        <td>@Boss.Randomized.BossIdToBossName()</td>
        <td><a href="#" @onclick="() => OpenModal(Boss)" @onclick:preventDefault>Change</a></td>
    </RowTemplate>
</Table>

@code {
    [CascadingParameter] public IModalService Modal { get; set; }

    [Parameter] public string BossName { get; set; }

    [Parameter] public Action<string, string> UpdateBoss { get; set; }
    [Parameter] public Dictionary<string, string> RandomizedBosses { get; set; }

    private List<Boss> Bosses { get; set; }

    public override async Task SetParametersAsync(ParameterView parameters)
    {
        if (parameters.TryGetValue<Dictionary<string, string>>(nameof(RandomizedBosses), out var bosses))
        {
            this.Bosses = bosses.Select(x => new Boss { Id = x.Key, Randomized = x.Value }).ToList();
        }

        await base.SetParametersAsync(parameters);
    }

    private void OpenModal(Boss boss)
    {
        var parameters = new ModalParameters();

        parameters.Add("Id", boss.Id);
        parameters.Add("Randomized", boss.Randomized);

        parameters.Add("UpdateBoss", UpdateBoss);

        var options = new ModalOptions { Class = "modal-custom" };

        Modal.Show<ChangeBoss>($"Change {BossName}", parameters, options);
    }
}